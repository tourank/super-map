{
  "version": 3,
  "sources": ["../../../../../../Users/touran/super-map/netlify/functions/search-places.js"],
  "sourceRoot": "/var/folders/1b/dv0hpzms02s4xpryl9vx2_h00000gn/T/tmp-95735-fP3QrLf2h8NH",
  "sourcesContent": ["export const handler = async (event) => {\n  const { query, location } = JSON.parse(event.body);\n\n  if (!process.env.GOOGLE_PLACES_API_KEY) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: 'Google Places API key not configured' }),\n    };\n  }\n\n  try {\n    const requestBody = {\n      textQuery: query,\n      maxResultCount: 10\n    };\n\n    if (location && location.latitude && location.longitude) {\n      requestBody.locationBias = {\n        circle: {\n          center: {\n            latitude: location.latitude,\n            longitude: location.longitude\n          },\n          radius: 10000\n        }\n      };\n    }\n\n    const response = await fetch('https://places.googleapis.com/v1/places:searchText', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Goog-Api-Key': process.env.GOOGLE_PLACES_API_KEY,\n        'X-Goog-FieldMask': 'places.id,places.displayName,places.formattedAddress,places.rating,places.priceLevel,places.types,places.location'\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(`Places API error: ${response.status}`);\n    }\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ \n        results: data.places || [],\n        status: 'OK'\n      }),\n    };\n  } catch (error) {\n    console.error('Places API error:', error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: error.message }),\n    };\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,IAAM,UAAU,OAAO,UAAU;AACtC,QAAM,EAAE,OAAO,SAAS,IAAI,KAAK,MAAM,MAAM,IAAI;AAEjD,MAAI,CAAC,QAAQ,IAAI,uBAAuB;AACtC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,uCAAuC,CAAC;AAAA,IACxE;AAAA,EACF;AAEA,MAAI;AACF,UAAM,cAAc;AAAA,MAClB,WAAW;AAAA,MACX,gBAAgB;AAAA,IAClB;AAEA,QAAI,YAAY,SAAS,YAAY,SAAS,WAAW;AACvD,kBAAY,eAAe;AAAA,QACzB,QAAQ;AAAA,UACN,QAAQ;AAAA,YACN,UAAU,SAAS;AAAA,YACnB,WAAW,SAAS;AAAA,UACtB;AAAA,UACA,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAEA,UAAM,WAAW,MAAM,MAAM,sDAAsD;AAAA,MACjF,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,kBAAkB,QAAQ,IAAI;AAAA,QAC9B,oBAAoB;AAAA,MACtB;AAAA,MACA,MAAM,KAAK,UAAU,WAAW;AAAA,IAClC,CAAC;AAED,UAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,qBAAqB,SAAS,MAAM,EAAE;AAAA,IACxD;AAEA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS,KAAK,UAAU,CAAC;AAAA,QACzB,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,qBAAqB,KAAK;AACxC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,MAAM,QAAQ,CAAC;AAAA,IAC/C;AAAA,EACF;AACF;",
  "names": []
}
