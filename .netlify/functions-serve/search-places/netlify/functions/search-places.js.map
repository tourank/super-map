{
  "version": 3,
  "sources": ["../../../../../../Users/touran/super-map/netlify/functions/search-places.js", "../../../../../../Users/touran/super-map/src/constants/index.js"],
  "sourceRoot": "/var/folders/1b/dv0hpzms02s4xpryl9vx2_h00000gn/T/tmp-8750-jzV4LmBLyGse",
  "sourcesContent": ["import { API_CONFIG, API_RESPONSES } from '../../src/constants/index.js';\n\nexport const handler = async (event) => {\n  // Handle preflight OPTIONS request\n  if (event.httpMethod === 'OPTIONS') {\n    return API_RESPONSES.options();\n  }\n\n\n  if (!event.body) {\n    return API_RESPONSES.error('Request body is required', 400);\n  }\n\n  let parsedBody;\n  try {\n    parsedBody = JSON.parse(event.body);\n  } catch (error) {\n    return API_RESPONSES.error('Invalid JSON in request body', 400);\n  }\n\n  const { query, location } = parsedBody;\n\n  if (!process.env.GOOGLE_PLACES_API_KEY) {\n    return API_RESPONSES.error('Google Places API key not configured');\n  }\n\n  try {\n    const requestBody = {\n      textQuery: query,\n      maxResultCount: API_CONFIG.MAX_RESULTS_COUNT\n    };\n\n    if (location && location.latitude && location.longitude) {\n      requestBody.locationBias = {\n        circle: {\n          center: {\n            latitude: location.latitude,\n            longitude: location.longitude\n          },\n          radius: API_CONFIG.PLACES_SEARCH_RADIUS\n        }\n      };\n    }\n\n\n    const response = await fetch('https://places.googleapis.com/v1/places:searchText', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Goog-Api-Key': process.env.GOOGLE_PLACES_API_KEY,\n        'X-Goog-FieldMask': 'places.id,places.displayName,places.formattedAddress,places.rating,places.types'\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(`Places API error: ${response.status}`);\n    }\n\n    return API_RESPONSES.success({ \n      results: data.places || [],\n      status: 'OK'\n    });\n  } catch (error) {\n    console.error('Places API error:', error);\n    return API_RESPONSES.error(error.message);\n  }\n};\n", "// API Configuration Constants\nexport const API_CONFIG = {\n  // Google Places API\n  PLACES_SEARCH_RADIUS: 10000, // 10km radius for place searches\n  MAX_RESULTS_COUNT: 10, // Maximum number of results to return\n  \n  // Geolocation Settings\n  GEOLOCATION_TIMEOUT: 10000, // 10 seconds timeout for geolocation\n  GEOLOCATION_MAX_AGE: 60000, // 1 minute cache for location data\n  \n  // Test Timeouts\n  TEST_TIMEOUT: 5000, // 5 seconds for E2E test assertions\n};\n\n// CORS Headers Template\nexport const CORS_HEADERS = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'Content-Type',\n  'Access-Control-Allow-Methods': 'POST, OPTIONS'\n};\n\n// API Response Templates\nexport const API_RESPONSES = {\n  success: (data) => ({\n    statusCode: 200,\n    headers: CORS_HEADERS,\n    body: JSON.stringify(data)\n  }),\n  \n  error: (message, statusCode = 500) => ({\n    statusCode,\n    headers: CORS_HEADERS,\n    body: JSON.stringify({ error: message })\n  }),\n  \n  options: () => ({\n    statusCode: 200,\n    headers: CORS_HEADERS,\n    body: ''\n  })\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCO,IAAM,aAAa;AAAA;AAAA,EAExB,sBAAsB;AAAA;AAAA,EACtB,mBAAmB;AAAA;AAAA;AAAA,EAGnB,qBAAqB;AAAA;AAAA,EACrB,qBAAqB;AAAA;AAAA;AAAA,EAGrB,cAAc;AAAA;AAChB;AAGO,IAAM,eAAe;AAAA,EAC1B,+BAA+B;AAAA,EAC/B,gCAAgC;AAAA,EAChC,gCAAgC;AAClC;AAGO,IAAM,gBAAgB;AAAA,EAC3B,SAAS,CAAC,UAAU;AAAA,IAClB,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,MAAM,KAAK,UAAU,IAAI;AAAA,EAC3B;AAAA,EAEA,OAAO,CAAC,SAAS,aAAa,SAAS;AAAA,IACrC;AAAA,IACA,SAAS;AAAA,IACT,MAAM,KAAK,UAAU,EAAE,OAAO,QAAQ,CAAC;AAAA,EACzC;AAAA,EAEA,SAAS,OAAO;AAAA,IACd,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,MAAM;AAAA,EACR;AACF;;;ADtCO,IAAM,UAAU,OAAO,UAAU;AAEtC,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO,cAAc,QAAQ;AAAA,EAC/B;AAGA,MAAI,CAAC,MAAM,MAAM;AACf,WAAO,cAAc,MAAM,4BAA4B,GAAG;AAAA,EAC5D;AAEA,MAAI;AACJ,MAAI;AACF,iBAAa,KAAK,MAAM,MAAM,IAAI;AAAA,EACpC,SAAS,OAAO;AACd,WAAO,cAAc,MAAM,gCAAgC,GAAG;AAAA,EAChE;AAEA,QAAM,EAAE,OAAO,SAAS,IAAI;AAE5B,MAAI,CAAC,QAAQ,IAAI,uBAAuB;AACtC,WAAO,cAAc,MAAM,sCAAsC;AAAA,EACnE;AAEA,MAAI;AACF,UAAM,cAAc;AAAA,MAClB,WAAW;AAAA,MACX,gBAAgB,WAAW;AAAA,IAC7B;AAEA,QAAI,YAAY,SAAS,YAAY,SAAS,WAAW;AACvD,kBAAY,eAAe;AAAA,QACzB,QAAQ;AAAA,UACN,QAAQ;AAAA,YACN,UAAU,SAAS;AAAA,YACnB,WAAW,SAAS;AAAA,UACtB;AAAA,UACA,QAAQ,WAAW;AAAA,QACrB;AAAA,MACF;AAAA,IACF;AAGA,UAAM,WAAW,MAAM,MAAM,sDAAsD;AAAA,MACjF,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,kBAAkB,QAAQ,IAAI;AAAA,QAC9B,oBAAoB;AAAA,MACtB;AAAA,MACA,MAAM,KAAK,UAAU,WAAW;AAAA,IAClC,CAAC;AAED,UAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,qBAAqB,SAAS,MAAM,EAAE;AAAA,IACxD;AAEA,WAAO,cAAc,QAAQ;AAAA,MAC3B,SAAS,KAAK,UAAU,CAAC;AAAA,MACzB,QAAQ;AAAA,IACV,CAAC;AAAA,EACH,SAAS,OAAO;AACd,YAAQ,MAAM,qBAAqB,KAAK;AACxC,WAAO,cAAc,MAAM,MAAM,OAAO;AAAA,EAC1C;AACF;",
  "names": []
}
