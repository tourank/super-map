{
  "version": 3,
  "sources": ["../../../../../../Users/touran/super-map/netlify/functions/place-details.js", "../../../../../../Users/touran/super-map/src/constants/index.js"],
  "sourceRoot": "/var/folders/1b/dv0hpzms02s4xpryl9vx2_h00000gn/T/tmp-8750-Abvw1FgnNA0T",
  "sourcesContent": ["import { API_RESPONSES } from '../../src/constants/index.js';\n\nexport const handler = async (event) => {\n  if (!event.body) {\n    return API_RESPONSES.error('Request body is required', 400);\n  }\n\n  let parsedBody;\n  try {\n    parsedBody = JSON.parse(event.body);\n  } catch (error) {\n    return API_RESPONSES.error('Invalid JSON in request body', 400);\n  }\n\n  const { placeId, fields } = parsedBody;\n\n  if (!process.env.GOOGLE_PLACES_API_KEY) {\n    return API_RESPONSES.error('Google Places API key not configured');\n  }\n\n  if (!placeId) {\n    return API_RESPONSES.error('Place ID is required', 400);\n  }\n\n  try {\n    // Premium amenity fields for detailed searches\n    const defaultFields = [\n      'displayName',\n      'formattedAddress',\n      'rating',\n      'priceLevel',\n      'types',\n      'location',\n      'businessStatus',\n      'currentOpeningHours',\n      'nationalPhoneNumber',\n      'websiteUri',\n      // Premium amenity fields\n      'allowsDogs',\n      'delivery',\n      'dineIn',\n      'takeout',\n      'outdoorSeating',\n      'reservable',\n      'servesBreakfast',\n      'servesLunch',\n      'servesDinner',\n      'servesVegetarianFood',\n      'servesBeer',\n      'servesWine',\n      'goodForChildren',\n      'goodForGroups'\n    ];\n\n    const fieldsToRequest = fields || defaultFields;\n    const fieldMask = fieldsToRequest.join(',');\n\n    const response = await fetch(`https://places.googleapis.com/v1/places/${placeId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Goog-Api-Key': process.env.GOOGLE_PLACES_API_KEY,\n        'X-Goog-FieldMask': fieldMask\n      }\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(`Places API error: ${response.status} - ${data.error?.message || 'Unknown error'}`);\n    }\n\n    return API_RESPONSES.success({ \n      place: data,\n      status: 'OK'\n    });\n  } catch (error) {\n    console.error('Place Details API error:', error);\n    return API_RESPONSES.error(error.message);\n  }\n};", "// API Configuration Constants\nexport const API_CONFIG = {\n  // Google Places API\n  PLACES_SEARCH_RADIUS: 10000, // 10km radius for place searches\n  MAX_RESULTS_COUNT: 10, // Maximum number of results to return\n  \n  // Geolocation Settings\n  GEOLOCATION_TIMEOUT: 10000, // 10 seconds timeout for geolocation\n  GEOLOCATION_MAX_AGE: 60000, // 1 minute cache for location data\n  \n  // Test Timeouts\n  TEST_TIMEOUT: 5000, // 5 seconds for E2E test assertions\n};\n\n// CORS Headers Template\nexport const CORS_HEADERS = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'Content-Type',\n  'Access-Control-Allow-Methods': 'POST, OPTIONS'\n};\n\n// API Response Templates\nexport const API_RESPONSES = {\n  success: (data) => ({\n    statusCode: 200,\n    headers: CORS_HEADERS,\n    body: JSON.stringify(data)\n  }),\n  \n  error: (message, statusCode = 500) => ({\n    statusCode,\n    headers: CORS_HEADERS,\n    body: JSON.stringify({ error: message })\n  }),\n  \n  options: () => ({\n    statusCode: 200,\n    headers: CORS_HEADERS,\n    body: ''\n  })\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACeO,IAAM,eAAe;AAAA,EAC1B,+BAA+B;AAAA,EAC/B,gCAAgC;AAAA,EAChC,gCAAgC;AAClC;AAGO,IAAM,gBAAgB;AAAA,EAC3B,SAAS,CAAC,UAAU;AAAA,IAClB,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,MAAM,KAAK,UAAU,IAAI;AAAA,EAC3B;AAAA,EAEA,OAAO,CAAC,SAAS,aAAa,SAAS;AAAA,IACrC;AAAA,IACA,SAAS;AAAA,IACT,MAAM,KAAK,UAAU,EAAE,OAAO,QAAQ,CAAC;AAAA,EACzC;AAAA,EAEA,SAAS,OAAO;AAAA,IACd,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,MAAM;AAAA,EACR;AACF;;;ADtCO,IAAM,UAAU,OAAO,UAAU;AACtC,MAAI,CAAC,MAAM,MAAM;AACf,WAAO,cAAc,MAAM,4BAA4B,GAAG;AAAA,EAC5D;AAEA,MAAI;AACJ,MAAI;AACF,iBAAa,KAAK,MAAM,MAAM,IAAI;AAAA,EACpC,SAAS,OAAO;AACd,WAAO,cAAc,MAAM,gCAAgC,GAAG;AAAA,EAChE;AAEA,QAAM,EAAE,SAAS,OAAO,IAAI;AAE5B,MAAI,CAAC,QAAQ,IAAI,uBAAuB;AACtC,WAAO,cAAc,MAAM,sCAAsC;AAAA,EACnE;AAEA,MAAI,CAAC,SAAS;AACZ,WAAO,cAAc,MAAM,wBAAwB,GAAG;AAAA,EACxD;AAEA,MAAI;AAEF,UAAM,gBAAgB;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,UAAM,kBAAkB,UAAU;AAClC,UAAM,YAAY,gBAAgB,KAAK,GAAG;AAE1C,UAAM,WAAW,MAAM,MAAM,2CAA2C,OAAO,IAAI;AAAA,MACjF,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,kBAAkB,QAAQ,IAAI;AAAA,QAC9B,oBAAoB;AAAA,MACtB;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,qBAAqB,SAAS,MAAM,MAAM,KAAK,OAAO,WAAW,eAAe,EAAE;AAAA,IACpG;AAEA,WAAO,cAAc,QAAQ;AAAA,MAC3B,OAAO;AAAA,MACP,QAAQ;AAAA,IACV,CAAC;AAAA,EACH,SAAS,OAAO;AACd,YAAQ,MAAM,4BAA4B,KAAK;AAC/C,WAAO,cAAc,MAAM,MAAM,OAAO;AAAA,EAC1C;AACF;",
  "names": []
}
