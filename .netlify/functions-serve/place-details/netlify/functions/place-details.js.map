{
  "version": 3,
  "sources": ["../../../../../../Users/touran/super-map/netlify/functions/place-details.js"],
  "sourceRoot": "/var/folders/1b/dv0hpzms02s4xpryl9vx2_h00000gn/T/tmp-95735-LhtATIpBqa8Q",
  "sourcesContent": ["export const handler = async (event) => {\n  const { placeId, fields } = JSON.parse(event.body);\n\n  if (!process.env.GOOGLE_PLACES_API_KEY) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: 'Google Places API key not configured' }),\n    };\n  }\n\n  if (!placeId) {\n    return {\n      statusCode: 400,\n      body: JSON.stringify({ error: 'Place ID is required' }),\n    };\n  }\n\n  try {\n    // Premium amenity fields for detailed searches\n    const defaultFields = [\n      'displayName',\n      'formattedAddress',\n      'rating',\n      'priceLevel',\n      'types',\n      'location',\n      'businessStatus',\n      'currentOpeningHours',\n      'nationalPhoneNumber',\n      'websiteUri',\n      // Premium amenity fields\n      'allowsDogs',\n      'delivery',\n      'dineIn',\n      'takeout',\n      'outdoorSeating',\n      'reservable',\n      'servesBreakfast',\n      'servesLunch',\n      'servesDinner',\n      'servesVegetarianFood',\n      'servesBeer',\n      'servesWine',\n      'goodForChildren',\n      'goodForGroups'\n    ];\n\n    const fieldsToRequest = fields || defaultFields;\n    const fieldMask = fieldsToRequest.join(',');\n\n    const response = await fetch(`https://places.googleapis.com/v1/places/${placeId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Goog-Api-Key': process.env.GOOGLE_PLACES_API_KEY,\n        'X-Goog-FieldMask': fieldMask\n      }\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(`Places API error: ${response.status} - ${data.error?.message || 'Unknown error'}`);\n    }\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ \n        place: data,\n        status: 'OK'\n      }),\n    };\n  } catch (error) {\n    console.error('Place Details API error:', error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: error.message }),\n    };\n  }\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,IAAM,UAAU,OAAO,UAAU;AACtC,QAAM,EAAE,SAAS,OAAO,IAAI,KAAK,MAAM,MAAM,IAAI;AAEjD,MAAI,CAAC,QAAQ,IAAI,uBAAuB;AACtC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,uCAAuC,CAAC;AAAA,IACxE;AAAA,EACF;AAEA,MAAI,CAAC,SAAS;AACZ,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,uBAAuB,CAAC;AAAA,IACxD;AAAA,EACF;AAEA,MAAI;AAEF,UAAM,gBAAgB;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,UAAM,kBAAkB,UAAU;AAClC,UAAM,YAAY,gBAAgB,KAAK,GAAG;AAE1C,UAAM,WAAW,MAAM,MAAM,2CAA2C,OAAO,IAAI;AAAA,MACjF,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,kBAAkB,QAAQ,IAAI;AAAA,QAC9B,oBAAoB;AAAA,MACtB;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,qBAAqB,SAAS,MAAM,MAAM,KAAK,OAAO,WAAW,eAAe,EAAE;AAAA,IACpG;AAEA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO;AAAA,QACP,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,4BAA4B,KAAK;AAC/C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,MAAM,QAAQ,CAAC;AAAA,IAC/C;AAAA,EACF;AACF;",
  "names": []
}
